<style type="less">
    .weui-tab {
        .weui-tab__panel {
            padding-top: 53px;
        }
    }
    .close {
        display: none;
    }
</style>
<template>
    <view class="page" style="padding-bottom: 40px;">
        <Search :inputShowed.sync="inputShowed" :clear.sync="clear" placeholder="搜索客户、业务员、日期、金额、重量" :repurchaseList.sync="searchOrderList" :searchHistoryPage.sync="searchHistoryPage" :searchResultPage.sync="searchResultPage" :resultLoading.sync="resultLoading" :noResultBackLog.sync="noResultBackLog" :hasNoSearchResult.sync="hasNoSearchResult" :historySearchList.sync="historySearchList"></Search>
        <view class="weui-tab {{inputShowed ? 'close' : ''}}">
            <Tab :activeIndex.sync="activeIndex" :sliderWidth.sync="sliderWidth" :tabs.sync="tabs"></Tab>
            <view class="weui-tab__panel">
                <view class="weui-tab__content" hidden="{{activeIndex != 0}}">
                    <RepurchaseList :repurchaseList.sync="allOrderList" id="purchase1" tabIndex="0"></RepurchaseList>
                    <view class="weui-loadmore" wx:if="{{loading[0]}}">
                        <view class="weui-loading"></view>
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">正在加载</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[0] && (page[0] !== 1 && page[0] !== 2)}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有了，别拉了~</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[0] && page[0] === 1}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">目前无待处理的订单~</view>
                    </view>
                </view>
                <view class="weui-tab__content" hidden="{{activeIndex != 1}}">
                    <RepurchaseList2 :repurchaseList.sync="type1OrderList" id="purchase2" tabIndex="1"></RepurchaseList2>
                    <view class="weui-loadmore" wx:if="{{loading[1]}}">
                        <view class="weui-loading"></view>
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">正在加载</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[1] && (page[1] !== 1 && page[1] !== 2)}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有了，别拉了~</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[1] && page[1] === 1}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">目前无待处理的订单~</view>
                    </view>
                </view>
                <view class="weui-tab__content" hidden="{{activeIndex != 2}}">
                    <RepurchaseList3 :repurchaseList.sync="type2OrderList" id="purchase3" tabIndex="2"></RepurchaseList3>
                    <view class="weui-loadmore" wx:if="{{loading[2]}}">
                        <view class="weui-loading"></view>
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">正在加载</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[2] && (page[2] !== 1 && page[2] !== 2)}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有了，别拉了~</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[2] && page[2] === 1}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">目前无待处理的订单~</view>
                    </view>
                </view>
                <view class="weui-tab__content" hidden="{{activeIndex != 3}}" wx:if="{{permission !== 'zhl'}}">
                    <RepurchaseList4 :repurchaseList.sync="type3OrderList" id="purchase4" tabIndex="3"></RepurchaseList4>
                    <view class="weui-loadmore" wx:if="{{loading[3]}}">
                        <view class="weui-loading"></view>
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">正在加载</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[3] && (page[3] !== 1 && page[3] !== 2)}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有了，别拉了~</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[3] && page[3] === 1}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">目前无待处理的订单~</view>
                    </view>
                </view>
                <view class="weui-tab__content" hidden="{{activeIndex != 4}}" wx:if="{{permission !== 'zhl'}}">
                    <RepurchaseList5 :repurchaseList.sync="type4OrderList" id="purchase5" tabIndex="4"></RepurchaseList5>
                    <view class="weui-loadmore" wx:if="{{loading[4]}}">
                        <view class="weui-loading"></view>
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">正在加载</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[4] && (page[4] !== 1 && page[4] !== 2)}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有了，别拉了~</view>
                    </view>
                    <view class="weui-loadmore" wx:if="{{noBackLog[4] && page[4] === 1}}">
                        <view class="weui-loadmore__tips weui-loadmore__tips_in-line">目前无待处理的订单~</view>
                    </view>
                </view>
            </view>
        </view>
        <TabBar :tabBar.sync="tabBarList"></TabBar>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import Search from '../../components/search';
    import Tab from '../../components/tab';
    import RepurchaseList from '../../components/repurchaseList';
    import TabBar from '../../components/tabBar';
    import utils from '../../utils/index';

    export default class PurchaseMain extends wepy.page {
        config = {
            navigationBarTitleText: '回购单'
        };
        components = {
            Search: Search,
            Tab: Tab,
            RepurchaseList: RepurchaseList,
            RepurchaseList2: RepurchaseList,
            RepurchaseList3: RepurchaseList,
            RepurchaseList4: RepurchaseList,
            RepurchaseList5: RepurchaseList,
            TabBar: TabBar
        };

        data = {
            inputShowed: false,
            clear: false,
            tabs: ['全部', '待申请付款', '待财务审核', '待打款', '待确认收货'],
            activeIndex: 0,
            sliderWidth: 64, // 需要设置slider的宽度，用于计算中间位置
            permission: '',
            allOrderList: [],
            type1OrderList: [],
            type2OrderList: [],
            type3OrderList: [],
            type4OrderList: [],
            tabBarList: {
                color: '#403E40',
                selectedColor: '#C4261D',
                backgroundColor: '#fff',
                borderStyle: '#ccc',
                list: [
                    {
                        pagePath: '/views/user/main',
                        text: '首页',
                        iconPath: '../../images/home.png',
                        selectedIconPath: '../../images/home_sel.png',
                        clas: 'menu-item',
                        active: false
                    },
                    {
                        pagePath: '/views/user/purchaseMain',
                        text: '回购单',
                        iconPath: '../../images/purchase.png',
                        selectedIconPath: '../../images/purchase_sel.png',
                        clas: 'menu-item',
                        active: true
                    },
                    {
                        pagePath: '/views/user/center',
                        text: '我',
                        iconPath: '../../images/me.png',
                        selectedIconPath: '../../images/me_sel.png',
                        clas: 'menu-item',
                        active: false
                    }
                ],
                position: 'bottom'
            },
            page: [1, 1, 1, 1, 1],
            limit: 10,
            noBackLog: [false, false, false, false, false],
            loading: [false, false, false, false, false],
            // 搜索中历史和结果限制每页10条记录
            searchLimit: 10,
            // 搜索中历史记录的当前页数
            searchHistoryPage: 1,
            // 搜索中结果记录的当前页数
            searchOrderList: [],
            searchResultPage: 1,
            resultLoading: false,
            noResultBackLog: false,
            hasNoSearchResult: false,
            // 历史记录的结果
            historySearchList: []
        };

        methods = {

        };

        getType(id) {
            let type = '';
            switch (this.tabs[id]) {
            case '全部':
                type = 'all';
                break;
            case '待申请付款':
                type = '0';
                break;
            case '待财务审核':
                type = '1';
                break;
            case '待打款':
                type = '2';
                break;
            case '待确认收货':
                type = '3';
                break;
            default:
                type = 'all';
            }
            return type;
        }
        events = {
            tabChange (id, e) {
                this.activeIndex = 1 * id;
                this.qryBuybackOrder(this.getType(id), (1 * id));
            },
            goToInputExpress(order) {
                wx.navigateTo({
                    url: `inputExpress?name=${order.name}&&no=${order.orderNo}`
                });
            },
            goToConfirmPay(order) {
                wx.setStorageSync('payOrder', '');
                wx.navigateTo({
                    url: `confirmPay?no=${order.orderNo}`
                });
            },
            // 状态变更
            changeState (order, state) {
                utils.ajax({
                    url: `/order/state/change/to/${state}?orderNo=${order.orderNo}`,
                    method: 'GET',
                    success: (data) => {
                        let stateDesc = '';
                        switch (state) {
                        case '1':
                            stateDesc = '申请付款成功';
                            break;
                        case '2':
                            stateDesc = '审核成功';
                            break;
                        case '3':
                            stateDesc = '打款成功';
                            break;
                        case '4':
                            stateDesc = '收款成功';
                            break;
                        default:
                            stateDesc = '';
                        }
                        wx.showToast({
                            title: stateDesc,
                            icon: 'success',
                            duraction: 2000
                        });
                        this.updateBuybackOrder();
                    }
                });
            },
            // 物流状态变更
            changeLogisticsState (order, state) {
                utils.ajax({
                    url: `/order/logistics/state/change/to/${state}?orderNo=${order.orderNo}`,
                    method: 'GET',
                    success: (data) => {
                        let stateDesc = '';
                        switch (state) {
                        case '2':
                            stateDesc = '签收成功';
                            break;
                        case '3':
                            stateDesc = '发料成功';
                            break;
                        case '4':
                            stateDesc = '收料成功';
                            break;
                        default:
                            stateDesc = '';
                        }
                        wx.showToast({
                            title: stateDesc,
                            icon: 'success',
                            duraction: 2000
                        });
                        this.updateBuybackOrder();
                    }
                });
            },
            // 催办
            getCui (orderNo) {
                utils.ajax({
                    url: `/order/update/flag?orderNo=${orderNo}`,
                    method: 'GET',
                    success: (data) => {
                        wx.showToast({
                            title: '已成功发送催办消息',
                            icon: 'none',
                            duraction: 2000
                        });
                    }
                });
            },
            // 更新搜索结果历史记录
            refreshSearchResult(searchCondition, searchResultPage) {
                // 通过页数为第一页判断是不是第一次加载数据，若是，删除之前的查询list
                if (searchResultPage === 1) {
                    this.searchOrderList.length = 0;
                    this.noResultBackLog = false;
                    this.hasNoSearchResult = false;
                }
                if (!this.noResultBackLog) {
                    this.resultLoading = true;
                    utils.ajax({
                        url: `/order/search?key=${searchCondition}&page=${searchResultPage}&limit=${this.searchLimit}`,
                        method: 'GET',
                        success: (data) => {
                            const currentData = data.data;
                            const currentDataHandle = this.changeCurrentData(currentData.list);
                            this.searchResultPage += 1;
                            this.searchOrderList = this.searchOrderList.concat(currentDataHandle);
                            if (currentData.totalCount <= this.limit || currentData.list.length < this.limit) {
                                if (1 * currentData.totalCount === 0) {
                                    this.hasNoSearchResult = true;
                                }
                                this.noResultBackLog = true;
                            }
                            this.resultLoading = false;
                            this.$apply();
                        }
                    });
                }
            },
            // 获取搜索历史的记录
            refreshHistory() {
                this.historySearchList.length = 0;
                utils.ajax({
                    url: '/order/search/record/list',
                    method: 'GET',
                    success: (data) => {
                        this.historySearchList = data.data;
                        this.$apply();
                    }
                });
            },
            // 保存搜索历史记录
            saveHistory(searchCondition) {
                utils.ajax({
                    url: `/order/search/record/save?value=${searchCondition}`,
                    method: 'GET',
                    success: (data) => {
                        this.refreshHistory();
                    }
                });
            },
            deleteHistory(historyId) {
                utils.ajax({
                    url: `/order/search/record/del?id=${historyId}`,
                    method: 'GET',
                    success: (data) => {
                        this.refreshHistory();
                    }
                });
            },
            clearHistory() {
                utils.ajax({
                    url: `/order/search/record/clear`,
                    method: 'GET',
                    success: (data) => {
                        this.refreshHistory();
                    }
                });
            },
            // 跳转详情页
            goToPurchase (id) {
                wx.navigateTo({
                    url: `purchaseList?id=${id}`
                });
            }
        };
        currentStateDesc (stateDesc) {
            let tmp = '';
            switch (stateDesc) {
            case '-1':
                tmp = '待重新提交回购单';
                break;
            case '0':
                tmp = '待申请付款';
                break;
            case '1':
                tmp = '已申请付款';
                break;
            case '2':
                tmp = '财务已审核';
                break;
            case '3':
                tmp = '众恒隆已打款';
                break;
            case '4':
                tmp = '业务员已确认';
                break;
            default:
                tmp = '暂无状态';
            }
            return tmp;
        }
        currentState (state) {
            let tmp = '';
            switch (state) {
            case '-1':
                tmp = '待修改';
                break;
            case '0':
                tmp = '待申请付款';
                break;
            case '1':
                tmp = '待财务审核';
                break;
            case '2':
                tmp = '待众恒隆打款';
                break;
            case '3':
                tmp = '待业务员确认';
                break;
            case '4':
                tmp = '结束';
                break;
            default:
                tmp = '暂无状态';
            }
            return tmp;
        }
        currentLogisticsState (logisticsState) {
            let tmp = '';
            switch (logisticsState) {
            case '0':
                tmp = '待邮寄';
                break;
            case '1':
                tmp = '待回购员签收';
                break;
            case '2':
                tmp = '待移交众恒隆';
                break;
            case '3':
                tmp = '待众恒隆签收';
                break;
            case '4':
                tmp = '众恒隆已签收';
                break;
            default:
                tmp = '暂无物流状态';
            }
            return tmp;
        }
        currentPurchaseDate (date) {
            if (date) {
                return date.slice(0, 16);
            }
            return '';
        }

        updateBuybackOrder() {
            this.page = [1, 1, 1, 1, 1];
            this.noBackLog = [false, false, false, false, false];
            this.loading = [false, false, false, false, false];
            this.allOrderList.length = 0;
            this.type1OrderList.length = 0;
            this.type2OrderList.length = 0;
            this.type3OrderList.length = 0;
            this.type4OrderList.length = 0;
            this.qryBuybackOrder(this.getType(this.activeIndex), this.activeIndex);
        }

        changeCurrentData(dataList) {
            dataList.forEach(e => {
                e.purchaseDate = this.currentPurchaseDate(e.buybackDate);
                e.logisticsStateDesc = this.currentLogisticsState(e.logisticsState);
                e.stateDesc = this.currentState(e.state);
                e.stateDescDesc = this.currentStateDesc(e.state);
                e.materialImgSrc = `${utils.server_url}/order/view/img/${e.materialImg}/120_120?token=${wx.getStorageSync('session')}`;
            });
            return dataList;
        }
        // 查询待办处理事项
        qryBuybackOrder(type, idx) {
            if (!this.noBackLog[idx]) {
                this.loading[idx] = true;
                utils.ajax({
                    url: `/order/state/${type}?page=${this.page[idx]}&limit=${this.limit}`,
                    method: 'GET',
                    success: (data) => {
                        const currentData = data.data;
                        const currentDataHandle = this.changeCurrentData(currentData.list);
                        this.page[idx] += 1;
                        switch (idx) {
                        case 0:
                            this.allOrderList = this.allOrderList.concat(currentDataHandle);
                            break;
                        case 1:
                            this.type1OrderList = this.type1OrderList.concat(currentDataHandle);
                            break;
                        case 2:
                            this.type2OrderList = this.type2OrderList.concat(currentDataHandle);
                            break;
                        case 3:
                            this.type3OrderList = this.type3OrderList.concat(currentDataHandle);
                            break;
                        case 4:
                            this.type4OrderList = this.type4OrderList.concat(currentDataHandle);
                            break;
                        }
                        if (currentData.totalCount <= this.limit || currentData.list.length < this.limit) {
                            this.noBackLog[idx] = true;
                            if (currentData.totalCount === 0) {
                                this.page[idx] = 1;
                            }
                        }
                        this.loading[idx] = false;
                        this.$apply();
                    }
                });
            }
        }

        // 获取搜索历史的记录
        refreshHistory() {
            this.historySearchList.length = 0;
            utils.ajax({
                url: '/order/search/record/list',
                method: 'GET',
                success: (data) => {
                    this.historySearchList = data.data;
                    this.$apply();
                }
            });
        }
        onShow () {
            this.inputShowed = false;
            this.clear = true;
            // this.activeIndex = 0;
            this.page = [1, 1, 1, 1, 1];
            this.noBackLog = [false, false, false, false, false];
            this.loading = [false, false, false, false, false];
            this.allOrderList.length = 0;
            this.type1OrderList.length = 0;
            this.type2OrderList.length = 0;
            this.type3OrderList.length = 0;
            this.type4OrderList.length = 0;
            this.qryBuybackOrder(this.getType(this.activeIndex), this.activeIndex);
        };

        onLoad () {
            this.activeIndex = 0;
            this.permission = wx.getStorageSync('permissionType');
            switch (this.permission) {
            case 'ywy':
            case 'hgy':
            case 'cw':
                this.tabs = ['全部', '待申请付款', '待财务审核', '待打款', '待确认收货'];
                this.sliderWidth = 64;
                break;
            case 'zhl':
                this.tabs = ['全部', '待打款', '待确认收货'];
                this.sliderWidth = 106.6667;
                break;
            default:
                this.tabs = ['全部', '待申请付款', '待财务审核', '待打款', '待确认收货'];
                this.sliderWidth = 64;
            }
            this.$apply();
        }

        onReachBottom () {
            this.qryBuybackOrder(this.getType(this.activeIndex), this.activeIndex);
        }
    }
</script>
